#!/bin/bash -x

# Output commands and results to log file for testing
# Uncomment below command and add -x to shebang above to enable
exec > /tmp/user-data.log 2>&1

# Collect metadata
export AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
export REGION=$(echo $AZ | sed 's/[a-z]$//')
export INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
export MAC_ADDR=$(curl -s http://169.254.169.254/latest/meta-data/mac)
export SUBNET_ID=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${MAC_ADDR}/subnet-id)

# Set some required variables
export IP_ADDR=$(ip addr show  | grep "inet " | grep -v 127.0.0.1 |  awk '{print $2}' | sed 's/\/[0-9]*$//')
export SHORT_ID=$(echo $INSTANCE_ID | sed 's/^i-//' | cut -c 1-9)
export DOMAIN="{{ domain }}"
export EXT_DOMAIN="{{ ext_domain }}"
export HNAME="{{ service | lower}}-${SHORT_ID}"
export FQDN="${HNAME}.${DOMAIN}"
export MONITOR=$(aws ec2 describe-tags --region ${REGION} --filter Name=resource-id,Values=${INSTANCE_ID} --output text | grep Monitor | awk '{print $5}')

# Setup Hostname
hostnamectl set-hostname --static $FQDN
printf "$IP_ADDR\t$HNAME $FQDN\n" >> /etc/hosts
systemctl restart rsyslog

aws ec2 create-tags --region $REGION --resources $INSTANCE_ID --tags Key="Name",Value="$FQDN"

# Attach any static volumes
{% if volumes is defined %}
  {% for vol in volumes %}
volume_id_{{ loop.index }}=$(aws ec2 describe-volumes --region ${REGION} --filters Name=status,Values=available Name=tag:Name,Values={{ vol.name }} | grep "VolumeId" | awk '{print $2}' | sed 's/[\",]//g')

if [ ! -z "$volume_id_{{ loop.index }}" ]; then
  aws ec2 attach-volume --region $REGION --device {{ vol.device }} --instance-id ${INSTANCE_ID} --volume-id $volume_id_{{ loop.index }}
  if [ $? -ne 0 ]; then
    echo "{{ vol.name }} failed to attach"
  fi
fi
  {% endfor %}
{% endif %}

# Setup the xymon monitoring client
if [ -f /etc/default/xymon-client ]; then
  sed -i 's/^XYMONSERVERS=".*"/XYMONSERVERS="home.shihad.org"/' /etc/default/xymon-client
  sed -i 's/^CLIENTHOSTNAME=".*"/CLIENTHOSTNAME="{{ service }}.{{ ext_domain }}"/' /etc/default/xymon-client
  # Add xymon monitoring user to adm group to read log files.
  if getent group adm > /dev/null && getent passwd xymon; then
    usermod -a -G adm xymon
  fi
  # Grab the patching script from S3
  if [[ ! -z "$MONITOR" &&  "$MONITOR" == "xymon" ]]; then
    aws s3 cp s3://{{ s3_bucket }}/xymon/{{ patch_script }} {{ patch_script }}
    aws s3 cp s3://{{ s3_bucket }}/xymon/{{ deploy_script }} {{ deploy_script }}
    chmod 755 *.sh
    ./{{ deploy_script }}
  fi
  systemctl restart xymon-client
fi

# Enable puppet client
if [ -f /etc/puppetlabs/puppet/puppet.conf ]; then
  systemctl enable puppet
  systemctl start puppet
fi
